<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.springboot_shiro.dao.UsersDao">
  <resultMap id="BaseResultMap" type="com.example.springboot_shiro.domain.Users">
    <id column="userId" jdbcType="VARCHAR" property="userId" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="salt" jdbcType="VARCHAR" property="salt" />
    <result column="phoneNumber" jdbcType="VARCHAR" property="phoneNumber" />
    <result column="email" jdbcType="VARCHAR" property="email" />
  </resultMap>

  <resultMap id="BaseResultRoleMap" type="com.example.springboot_shiro.domain.Users">
    <id column="userId" jdbcType="VARCHAR" property="userId" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="salt" jdbcType="VARCHAR" property="salt" />
    <result column="phoneNumber" jdbcType="VARCHAR" property="phoneNumber" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <collection property="roles" javaType="java.util.List" ofType="com.example.springboot_shiro.domain.Role">
      <id column="roleId" property="roleId" />
      <result column="roleName" property="roleName" />
      <result column="roleDescription" property="roleDescription" />
      <result column="createPeople" property="createPeople" />
      <result column="createTime" property="createTime" />
      <association property="permissions" javaType="java.util.List" resultMap="PermissionsMap" />
      </collection>
  </resultMap>

  <resultMap id="PermissionsMap" type="com.example.springboot_shiro.domain.Permissions">
    <id column="permissionsId" property="permissionsId" />
    <result column="permissionsName" property="permissionsName" />
    <result column="permissions" property="permissions" />
    <result column="permissionsDescription" property="permissionsDescription" />
    <result column="createPeople" property="createPeople" />
    <result column="createTime" property="createTime" />
  </resultMap>

  <sql id="Base_Column_List">
    userId, username, password, salt, phoneNumber, email
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from users
    where userId = #{userId,jdbcType=VARCHAR}
  </select>

  <select id="selectByUserName" parameterType="java.lang.String" resultMap="BaseResultRoleMap">
    select
    users.*,role.*,permissions.*
    from users inner join users_role on users_role.user_id = users.userId inner join role on role.roleId = users_role.role_id inner join role_permissions on role_permissions.role_id = role.roleId inner join permissions on permissions.permissionsId = role_permissions.permissions_id where username = #{username,jdbcType=VARCHAR}
  </select>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from users
    where userId = #{userId,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.example.springboot_shiro.domain.Users">
    insert into users (userId, username, password, 
      salt, phoneNumber, email
      )
    values (#{userId,jdbcType=VARCHAR}, #{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{salt,jdbcType=VARCHAR}, #{phoneNumber,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.example.springboot_shiro.domain.Users">
    insert into users
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        userId,
      </if>
      <if test="username != null">
        username,
      </if>
      <if test="password != null">
        password,
      </if>
      <if test="salt != null">
        salt,
      </if>
      <if test="phoneNumber != null">
        phoneNumber,
      </if>
      <if test="email != null">
        email,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        #{userId,jdbcType=VARCHAR},
      </if>
      <if test="username != null">
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="salt != null">
        #{salt,jdbcType=VARCHAR},
      </if>
      <if test="phoneNumber != null">
        #{phoneNumber,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.springboot_shiro.domain.Users">
    update users
    <set>
      <if test="username != null">
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="salt != null">
        salt = #{salt,jdbcType=VARCHAR},
      </if>
      <if test="phoneNumber != null">
        phoneNumber = #{phoneNumber,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
    </set>
    where userId = #{userId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.springboot_shiro.domain.Users">
    update users
    set username = #{username,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      salt = #{salt,jdbcType=VARCHAR},
      phoneNumber = #{phoneNumber,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR}
    where userId = #{userId,jdbcType=VARCHAR}
  </update>
</mapper>