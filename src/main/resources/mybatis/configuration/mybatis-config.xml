<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd">
<!--mybatis配置根节点-->
<configuration>

    <!--连接数据库属性,可以使用properties配置文件进行属性配置<properties resource="config.properties">-->
    <properties>
        <property name="url" value="jdbc:mysql:///online_rating?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false&amp;nullNamePatternMatchesAll=true&amp;serverTimezone=UTC" />
        <property name="username" value="root" />
        <property name="password" value="iloveyou0315" />
        <property name="driver" value="com.mysql.jdbc.Driver" />
    </properties>


    <!--设置Mybatis的全局运行属性，比如：缓存cacheEnable等属性，MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。-->
    <!--<settings>
        &lt;!&ndash;配置所有映射器中配置的缓存的全局开关&ndash;&gt;
        <setting name="cacheEnabled" value="false"/>
        &lt;!&ndash;延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置fetchType属性来覆盖该项的开关状态。&ndash;&gt;
        <setting name="lazyLoadingEnabled" value="fasle" />
        &lt;!&ndash;当开启时，任何方法的调用都会加载该对象的所有属性。否则，每个属性会按需加载&ndash;&gt;
        <setting name="aggressiveLazyLoading" value="false" />
        &lt;!&ndash;是否允许单一语句返回多结果集（需要兼容驱动）。&ndash;&gt;
        <setting name="multipleResultSetsEnabled" value="true" />
        &lt;!&ndash;允许 JDBC 支持自动生成主键，需要驱动兼容。 如果设置为 true 则这个设置强制使用自动生成主键，尽管一些驱动不能兼容但仍可正常工作（比如 Derby）。	&ndash;&gt;
        <setting name="useGeneratedKeys" value="true" />
        &lt;!&ndash;指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示取消自动映射；PARTIAL 只会自动映射没有定义嵌套结果集映射的结果集。 FULL 会自动映射任意复杂的结果集（无论是否嵌套）。&ndash;&gt;
        <setting name="autoMappingBehavior" value="PARTIAL" />
        &lt;!&ndash;指定发现自动映射目标未知列（或者未知属性类型）的行为。NONE: 不做任何反应WARNING: 输出提醒日志 ('org.apache.ibatis.session.AutoMappingUnknownColumnBehavior' 的日志等级必须设置为 WARN)FAILING: 映射失败 (抛出 SqlSessionException)&ndash;&gt;
        <setting name="autoMappingUnknownColumnBehavior" value="NONE" />
        &lt;!&ndash;配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（prepared statements）； BATCH 执行器将重用语句并执行批量更新&ndash;&gt;
        <setting name="defaultExecutorType" value="SIMPLE" />
        &lt;!&ndash;设置超时时间，它决定驱动等待数据库响应的秒数。任意正整数&ndash;&gt;
        <setting name="defaultStatementTimeout" value="null" />
        &lt;!&ndash;为驱动的结果集获取数量（fetchSize）设置一个提示值。此参数只可以在查询设置中被覆盖。任意正整数&ndash;&gt;
        <setting name="defaultFetchSize" value="null" />
        &lt;!&ndash;允许在嵌套语句中使用分页（RowBounds）。如果允许使用则设置为false。&ndash;&gt;
        <setting name="safeRowBoundsEnabled" value="False" />
        &lt;!&ndash;允许在嵌套语句中使用分页（ResultHandler）。如果允许使用则设置为false。&ndash;&gt;
        <setting name="safeResultHandlerEnabled" value="true" />
        &lt;!&ndash;是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射。&ndash;&gt;
        <setting name="mapUnderscoreToCamelCase" value="false" />
        &lt;!&ndash;	MyBatis 利用本地缓存机制（Local Cache）防止循环引用（circular references）和加速重复嵌套查询。 默认值为 SESSION，这种情况下会缓存一个会话中执行的所有查询。 若设置值为 STATEMENT，本地会话仅用在语句执行上，对相同 SqlSession 的不同调用将不会共享数据。&ndash;&gt;
        <setting name="localCacheScope" value="SESSION" />
        &lt;!&ndash;	当没有为参数提供特定的 JDBC 类型时，为空值指定 JDBC 类型。 某些驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER。&ndash;&gt;
        <setting name="jdbcTypeForNull" value="OTHER" />
        &lt;!&ndash;指定哪个对象的方法触发一次延迟加载。&ndash;&gt;
        <setting name="lazyLoadTriggerMethods" value="equals,clone,hashCode,toString" />
        &lt;!&ndash;指定动态 SQL 生成的默认语言。&ndash;&gt;
        <setting name="defaultScriptingLanguage" value="org.apache.ibatis.scripting.xmltags.XMLLanguageDriver" />
        &lt;!&ndash;指定当结果集中值为 null 的时候是否调用映射对象的 setter（map 对象时为 put）方法，这对于有 Map.keySet() 依赖或 null 值初始化的时候是有用的。注意基本类型（int、boolean等）是不能设置成 null 的。&ndash;&gt;
        <setting name="callSettersOnNulls" value="false" />
        &lt;!&ndash;	当返回行的所有列都是空时，MyBatis默认返回null。 当开启这个设置时，MyBatis会返回一个空实例。 请注意，它也适用于嵌套的结果集 (i.e. collectioin and association)。（从3.4.2开始）&ndash;&gt;
        <setting name="returnInstanceForEmptyRow" value="false" />
        &lt;!&ndash;指定 MyBatis 增加到日志名称的前缀。&ndash;&gt;
        <setting name="logPrefix" value="Not set(可以是任何字符串)" />
        &lt;!&ndash;指定 MyBatis 所用日志的具体实现，未指定时将自动查找。&ndash;&gt;
        <setting name="logImpl" value="Not set,可选(SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING)" />
        &lt;!&ndash;指定 Mybatis 创建具有延迟加载能力的对象所用到的代理工具。可选，CGLIB | JAVASSIST&ndash;&gt;
        <setting name="proxyFactory" value="JAVASSIST" />
        &lt;!&ndash;允许使用方法签名中的名称作为语句参数名称。 为了使用该特性，你的工程必须采用Java 8编译，并且加上-parameters选项。（从3.4.1开始）&ndash;&gt;
        <setting name="useActualParamName" value="true" />
        &lt;!&ndash;指定一个提供Configuration实例的类. 这个被返回的Configuration实例是用来加载被反序列化对象的懒加载属性值. 这个类必须包含一个签名方法static Configuration getConfiguration(). (从 3.2.3 版本开始)&ndash;&gt;
        <setting name="configurationFactory" value="全限定类名" />
    </settings>

    &lt;!&ndash;类型别名，类型别名是为 Java 类型设置一个短的名字。它只和 XML 配置有关，存在的意义仅在于用来减少类完全限定名的冗余。&ndash;&gt;
    <typeAliases>
        <typeAlias alias="Integer" type="java.lang.Integer" />
        <typeAlias alias="Long" type="java.lang.Long" />
        <typeAlias alias="HashMap" type="java.util.HashMap" />
        <typeAlias alias="LinkedHashMap" type="java.util.LinkedHashMap" />
        <typeAlias alias="ArrayList" type="java.util.ArrayList" />
        <typeAlias alias="LinkedList" type="java.util.LinkedList" />
    </typeAliases>
    &lt;!&ndash;常用的类型转换器，将数据库或Java中的类型进行相互转换,无论是 MyBatis 在预处理语句（PreparedStatement）中设置一个参数时，还是从结果集中取出一个值时， 都会用类型处理器将获取的值以合适的方式转换成 Java 类型。&ndash;&gt;
    <typeHandlers>
        &lt;!&ndash;布尔类型&ndash;&gt;
        <typeHandler handler="BooleanTypeHandler" jdbcType="BOOLEAN" javaType="java.lang.Boolean" />
        &lt;!&ndash;字节类型,NUMERIC &ndash;&gt;
        <typeHandler handler="ByteTypeHandler" jdbcType="BYTE" javaType="java.lang.Byte" />
        &lt;!&ndash;短整类型,NUMERIC &ndash;&gt;
        <typeHandler handler="ShortTypeHandler" jdbcType="SHORT INTEGER" javaType="java.lang.Short" />
        &lt;!&ndash;整形类型,NUMERIC &ndash;&gt;
        <typeHandler handler="IntegerTypeHandler" jdbcType="INTEGER" javaType="java.lang.Integer" />
        &lt;!&ndash;长整型类型,NUMERIC &ndash;&gt;
        <typeHandler handler="LongTypeHandler" jdbcType="LONG INTEGER" javaType="java.lang.Long" />
        &lt;!&ndash;单精度浮点型,NUMERIC &ndash;&gt;
        <typeHandler handler="FloatTypeHandler" jdbcType="FLOAT" javaType="java.lang.Float" />
        &lt;!&ndash;双精度浮点型,NUMERIC &ndash;&gt;
        <typeHandler handler="DoubleTypeHandler" jdbcType="DOUBLE" javaType="java.lang.Double" />
        &lt;!&ndash;关于金融类型的浮点类型,NUMERIC &ndash;&gt;
        <typeHandler handler="BigDecimalTypeHandler" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
        &lt;!&ndash;字符串类型,CHAR&ndash;&gt;
        <typeHandler handler="StringTypeHandler" jdbcType="VARCHAR" javaType="java.lang.String" />
        &lt;!&ndash;字节数组类型&ndash;&gt;
        <typeHandler handler="ByteArrayTypeHandler" jdbcType="BYTE" javaType="byte[]" />
        &lt;!&ndash;日期类型&ndash;&gt;
        <typeHandler handler="DateTypeHandler" jdbcType="TIMESTAMP" javaType="java.util.Date" />
        &lt;!&ndash;仅日期类型&ndash;&gt;
        <typeHandler handler="DateOnlyTypeHandler" jdbcType="DATE" javaType="	java.util.Date" />
        &lt;!&ndash;仅时间类型&ndash;&gt;
        <typeHandler handler="TimeOnlyTypeHandler" jdbcType="TIME" javaType="	java.util.Date" />
        &lt;!&ndash;SQL日期时间类型&ndash;&gt;
        <typeHandler handler="SqlTimestampTypeHandler" jdbcType="TIMESTAMP" javaType="java.sql.Timestamp" />
        &lt;!&ndash;SQL日期类型&ndash;&gt;
        <typeHandler handler="SqlDateTypeHandler" jdbcType="DATE" javaType="java.sql.Date" />
        &lt;!&ndash;SQL时间类型&ndash;&gt;
        <typeHandler handler="SqlTimeTypeHandler" jdbcType="TIME" javaType="java.sql.Time" />
    </typeHandlers>-->

    <!--数据库环境配置-->
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"></transactionManager>
            <!--数据库连接配置源，type有三种模式，POOLED，UNPOOLED，JNDI-->
            <dataSource type="POOLED">

                <!--在SpringBoot使用mybatis-spring-boot-starter下推荐使用-->
               <!-- &lt;!&ndash;数据库连接url&ndash;&gt;
                <property name="url" value="${url}}" />
                &lt;!&ndash;数据库连接驱动&ndash;&gt;
                <property name="driver" value="${driver}}" />
                &lt;!&ndash;数据库连接用户名&ndash;&gt;
                <property name="username" value="${username}}" />
                &lt;!&ndash;数据库连接密码&ndash;&gt;
                <property name="password" value="${password}}" />-->

                <!-- 在任意时间可以存在的活动（也就是正在使用）连接数量，默认值：10-->
                <property name="poolMaximumActiveConnections" value="12" />
                <!-- 任意时间可能存在的空闲连接数。-->
                <property name="poolMaximumIdleConnections" value="0" />
                <!--在被强制返回之前，池中连接被检出（checked out）时间，默认值：20000 毫秒（即 20 秒）-->
                <property name="poolMaximumCheckoutTime" value="20000" />
                <!-- 这是一个底层设置，如果获取连接花费的相当长的时间，它会给连接池打印状态日志并重新尝试获取一个连接（避免在误配置的情况下一直安静的失败），默认值：20000 毫秒（即 20 秒）-->
                <property name="poolTimeToWait" value="20000" />
            </dataSource>
        </environment>
    </environments>

    <!--databaseIdProvider根据这个属性确定执行数据库厂商的sql语句，mybatis自动扫描并加载带有和不带有databaseIDProvider的SQK语句，同时存在则抛弃不带有databaseIdProvider的语句-->
    <!--<databaseIdProvider type="DB_VENDOR">
        <property name="SQL Server" value="sqlserver"/>
        <property name="DB2" value="db2"/>
        <property name="Oracle" value="oracle" />
        <property name="MySQL" value="mysql" />
    </databaseIdProvider>-->

    <!--(Mapper)映射器，Mybatis提供了自动查找存储SQL语句的XML配置的映射器-->
    <!--使用类路径进行查找-->
    <!--<mappers>
        <mapper resource="mybatis/mapper/PermissionRepositoryMapper.xml" />
        <mapper resource="mybatis/mapper/UserRepositoryMapper.xml" />
    </mappers>-->
    <!--第二种，查询指定路径下的映射接口-->
    <!--<mappers>
        <mapper class="com.example.springboot_demo.dao.UserRepositoryMapper" />
        <mapper class="com.example.springboot_demo.dao.PermissionRepositoryMapper" />
    </mappers>-->
    <!--第三种，扫描并注册指定路径下的接口-->
   <!-- <mappers>
        <package name="com.example.springboot_demo.dao" />
    </mappers>-->
</configuration>